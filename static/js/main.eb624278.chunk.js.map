{"version":3,"sources":["Qr/Qr.js","Barcode/Barcode.js","CodeScanner.js","App.js","index.js"],"names":["boxStyles","makeStyles","root","display","alignItems","flexDirection","result","window","innerWidth","justifyContent","width","margin","Qr","props","useState","input","setInput","boxClasses","className","TextField","label","value","onChange","e","target","Box","classes","id","delay","onScan","data","onError","err","console","log","style","Button","onClick","pngUrl","document","querySelector","toDataURL","replace","downloadLink","createElement","href","download","body","appendChild","click","removeChild","variant","Barcode","inputRef","useBarcode","options","displayValue","useEffect","w","getBoundingClientRect","h","Quagga","init","inputStream","type","constraints","height","facingMode","locator","patchSize","halfSample","numOfWorkers","decoder","readers","format","config","supplements","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","locate","start","onDetected","codeResult","code","slice","ref","maxWidth","maxHeight","cardStyles","labelStyles","background","alignItmes","padding","CodeScanner","cardClasses","labelClasses","Paper","elevation","Typography","Switch","handleMode","App","setType","mode","checked","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eb624278.chunk.js","sourcesContent":["// qr code reader and scanner component\nimport { useState } from \"react\";\n\nimport QRcode from \"qrcode.react\";\nimport QrReader from \"react-qr-reader\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst boxStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: () => {\n      let result = \"row\";\n      if(window.innerWidth < 500) {\n        result = \"column\";\n      }\n      return result;\n    },\n    justifyContent: \"space-around\",\n    width: \"100%\",\n    margin: \"1em 0\"\n  }\n});\n\nconst Qr = (props) => {\n  const [input, setInput] = useState(\"https://duckduckgo.com\");\n\n  const boxClasses = boxStyles();\n\n  const handleInput = (e) => {\n    setInput(e.target.value);\n  };\n  const downloadQr = () => {\n    const canvas = document.querySelector(\"#qrCode\");\n    const pngUrl = canvas\n      .toDataURL(\"image/png\")\n      .replace(\"image/png\", \"image/octet-stream\");\n    let downloadLink = document.createElement(\"a\");\n    downloadLink.href = pngUrl;\n    downloadLink.download = \"qr.png\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  const handleError = (err) => {\n    console.log(err);\n  };\n  const handleScan = (data) => {\n    let value = typeof(data) == \"string\" ? data : input;\n    setInput(value);\n  };\n\n  return (\n    <div className=\"qr\">\n      <TextField label=\"your link...\" value={input} onChange={handleInput}/>\n      <Box classes={boxClasses}>\n        <QRcode id=\"qrCode\" value={input}/>\n        <QrReader \n          delay={500} \n          onScan={handleScan}\n          onError={handleError}\n          style={{width: \"15em\"}}/>\n      </Box>\n      <Button onClick={downloadQr} variant=\"outlined\">Download QR as png</Button>\n    </div>\n  );\n};\n\nexport default Qr;\n","// qr barcode reader and scanner component\nimport { useState, useEffect } from \"react\";\nimport { useBarcode } from \"react-barcodes\";\nimport Quagga from \"@ericblade/quagga2\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst boxStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"space-around\",\n    width: \"100%\",\n    margin: \"1em 0\"\n  }\n});\n\nconst Barcode = (props) => {\n  const [input, setInput] = useState(\"https://duckduckgo.com\");\n\n  const boxClasses = boxStyles();\n\n  const { inputRef } = useBarcode({\n    value: input,\n    options: {\n      displayValue: true,\n    }\n  });\n\n  const handleInput = (e) => {\n    let value = e.target.value;\n    if(value === \"\") {\n      value = \" \";\n    }else if(value[0] === \" \") {\n      value = value.slice(1);\n    }\n    setInput(value);\n  };\n\n  const downloadBarcode = () => {\n    const canvas = document.querySelector(\"#barcode\");\n    const pngUrl = canvas\n      .toDataURL(\"image/png\")\n      .replace(\"image/png\", \"image/octet-stream\");\n    let downloadLink = document.createElement(\"a\");\n    downloadLink.href = pngUrl;\n    downloadLink.download = \"barcode.png\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  useEffect(() => {\n    let w = document.querySelector(\".barcode\").getBoundingClientRect().width,\n      h = w * 9 / 16;\n    w = w >= 700 ? 640 : w * 9 / 10;\n      Quagga.init({\n        inputStream: {\n            type : \"LiveStream\",\n            constraints: {\n                width: w,\n                height: h,\n                facingMode: \"environment\"\n            }\n        },\n        locator: {\n            patchSize: \"medium\",\n            halfSample: true\n        },\n        numOfWorkers: 2,\n        decoder: {\n            readers : [\n              \"code_128_reader\", \n              {\n                format: \"ean_reader\",\n                config: {\n                  supplements: [\n                    'ean_5_reader', 'ean_2_reader'\n                  ]\n                }\n              },\n              \"upc_reader\",\n              \"upc_e_reader\",\n              \"codebar_reader\"],\n            debug: {\n              drawBoundingBox: true,\n              showFrequency: true,\n              drawScanline: true,\n              showPattern: true\n            }\n        },\n        locate: true\n    }, function(err) {\n        if (err) {\n            return console.log(err);\n        }\n        Quagga.start();\n    });\n\n    Quagga.onDetected((result) => {\n      console.log(result);\n      let value = result.codeResult.code ? result.codeResult.code : input;\n      setInput(value);\n    });\n  });\n\n  return (\n    <div className=\"barcode\">\n      <TextField label=\"your link...\" value={input} onChange={handleInput} />\n      <Box classes={boxClasses}>\n        <canvas ref={inputRef} id=\"barcode\"/>\n        <div\n          id=\"interactive\"\n          className=\"viewport\"\n          style={{maxWidth: \"640px\", maxHeight: \"480px\", width: \"100%\", height: \"100%\"}}/>\n      </Box>\n      <Button\n        onClick={downloadBarcode}\n        variant=\"outlined\">\n          Download Barcode as png\n      </Button>\n\n    </div>\n  );\n};\n\nexport default Barcode;\n","\nimport Qr from \"./Qr/Qr.js\";\nimport Barcode from \"./Barcode/Barcode.js\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Switch from \"@material-ui/core/Switch\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst cardStyles = makeStyles({\n  root: {\n    width: \"80vw\"\n  }\n});\nconst labelStyles = makeStyles({\n  root: {\n    background: \"#dedede\",\n    display: \"flex\",\n    alignItmes: \"center\",\n    justifyContent: \"space-between\",\n    padding: \".5em 2em\",\n  }\n});\n\nconst CodeScanner = (props) => {\n  const cardClasses = cardStyles();\n  const labelClasses = labelStyles();\n\n  return (\n    <Paper classes={cardClasses} elevation={3}>\n      <Box classes={labelClasses}>\n        <Typography variant=\"h4\">{props.type}</Typography>\n        <Switch onChange={props.handleMode}/>\n      </Box>\n      {props.type === \"qr-code\" ? <Qr /> : props.type === \"barcode\" ? <Barcode /> : null}\n    </Paper>\n  );\n};\n\nexport default CodeScanner;\n","import { useState } from \"react\";\n\nimport CodeScanner from \"./CodeScanner\";\n\n\nconst App = () => {\n  const [type, setType] = useState(\"qr-code\");\n\n  const changeMode = (e) => {\n    let mode = e.target.checked ? \"barcode\" : \"qr-code\";\n    setType(mode);\n  };\n\n  return (\n    <CodeScanner type={type} handleMode={changeMode}/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}